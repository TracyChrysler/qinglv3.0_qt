#include "dialog.h"
#include "ui_dialog.h"
#include "savedata.h"
#include "param.h"

union
{
    uint32_t uint;
    float floatVal;
}myUnion;

void Dialog::sendToKz(uint8_t cmd,uint8_t *buf,uint32_t len)
{
    if(len!=0)
    {
        memcpy(mSendpcbuf + SZ_OVERHEAD, buf, len);
    }
    mSendpcbuf[OFFSET_HEADER] = HEADER_FIRST_BYTE;
    mSendpcbuf[OFFSET_HEADER + 1] = HEADER_SECOND_BYTE;
    mSendpcbuf[OFFSET_SND_ADDR] = SWJADDR;//
    mSendpcbuf[OFFSET_RCV_ADDR] = XWJADDR;
    mSendpcbuf[OFFSET_CMD] = cmd;//cmd
    mSendpcbuf[OFFSET_LEN] = len; //长度
    mSendpcbuf[OFFSET_CRC] = checkcrc8(mSendpcbuf + OFFSET_CMD, len + SZ_CMD + SZ_LEN);
    send_Data(mSendpcbuf, SZ_OVERHEAD + len);
}

void Dialog::send_Data(uint8_t *buf, uint8_t len)
{
    for (uint i = 0; i < len; ++i){
        qDebug("<0x%x>", buf[i]);
    }
    qDebug("1111111111111111111111");
    //mSerialPort->write(reinterpret_cast<char *>(buf), len);
    qint64 bytesWritten = mSerialPort->write(reinterpret_cast<char *>(buf), len);
    if (bytesWritten == len) {
        // 成功发送所有数据
        qDebug("send datas successful");
    } else {
        // 发送不完全或发生错误
        qDebug("send datas defeat");
    }
}

void Dialog::show_PromptInformation(QString str)
{
    mPal.setColor(QPalette::Text, QColor(0, 85, 0));
    // 在LWidPrtInfo中加入item
    ui->LWidPrtInfo->setPalette(mPal);
    ui->LWidPrtInfo->clear();
    ui->LWidPrtInfo->addItem(str);
}

void Dialog::show_PromptInformation_Red(QString str)
{
    mPal.setColor(QPalette::Text, QColor(Qt::red));
    ui->LWidPrtInfo->setPalette(mPal);
    ui->LWidPrtInfo->clear();
    ui->LWidPrtInfo->addItem(str);
}

void Dialog::on_BtnOpen_clicked()
{
    if (true == mIsOpen)
    {
        // 当前串口已经打开，应该执行关闭动作
        mSerialPort->close();
        ui->BtnOpen->setText("打开");
        mIsOpen = false;
        show_PromptInformation("关闭串口成功");
        ui->BtnOpen->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");

        // 打开下拉框
        // ui->BtnSend->setEnabled(mIsOpen);
        ui->CBoxSerialPort->setEnabled(true);
        ui->CBoxBaud->setEnabled(true);
        ui->CBoxParity->setEnabled(true);
        ui->CBoxDataBit->setEnabled(true);
        ui->CBoxStopBit->setEnabled(true);
    }
    else
    {
        // 没有打开串口，应该执行打开动作
        getSerialPortConfig();
        if (true == setSerialPortConfig())
        {
            mIsOpen = true;
            ui->BtnOpen->setText("关闭");
            show_PromptInformation("打开串口成功");
            ui->BtnOpen->setStyleSheet("background-color: rgb(0, 85, 0); color: rgb(255, 255, 255)");
            // 禁止使用下拉框
            // ui->BtnSend->setEnabled(mIsOpen);
            ui->CBoxSerialPort->setEnabled(false);
            ui->CBoxBaud->setEnabled(false);
            ui->CBoxParity->setEnabled(false);
            ui->CBoxDataBit->setEnabled(false);
            ui->CBoxStopBit->setEnabled(false);
        }

    }
}

// 获取串口配置
void Dialog::getSerialPortConfig()
{
    mPortName = ui->CBoxSerialPort->currentText();
    mBaudRate = ui->CBoxBaud->currentText();
    mParity   = ui->CBoxParity->currentText();
    mDataBits = ui->CBoxDataBit->currentText();
    mStopBits = ui->CBoxStopBit->currentText();
}

// 设置串口配置
bool Dialog::setSerialPortConfig()
{
    // 设置端口号
    mSerialPort->setPortName(mPortName);

    // 设置波特率
    if ("9600" == mBaudRate) {
        mSerialPort->setBaudRate(QSerialPort::Baud9600);
    } else if ("19200" == mBaudRate) {
        mSerialPort->setBaudRate(QSerialPort::Baud19200);
    } else {
        mSerialPort->setBaudRate(QSerialPort::Baud115200);
    }
    // 设置校验位
    if ("EVEN" == mParity) {
        mSerialPort->setParity(QSerialPort::EvenParity);
    } else if ("ODD" == mParity) {
        mSerialPort->setParity(QSerialPort::OddParity);
    } else {
        mSerialPort->setParity(QSerialPort::NoParity);
    }

    // 设置数据位
    if ("5" == mDataBits) {
        mSerialPort->setDataBits(QSerialPort::Data5);
    } else if ("6" == mDataBits) {
        mSerialPort->setDataBits(QSerialPort::Data6);
    } else if ("7" == mDataBits) {
        mSerialPort->setDataBits(QSerialPort::Data7);
    } else {
        mSerialPort->setDataBits(QSerialPort::Data8);
    }

    // 设置停止位
    if ("1.5" == mStopBits) {
        mSerialPort->setStopBits(QSerialPort::OneAndHalfStop);
    } else if ("2" == mStopBits) {
        mSerialPort->setStopBits(QSerialPort::TwoStop);
    } else {
        mSerialPort->setStopBits(QSerialPort::OneStop);
    }

    if (mSerialPort->isOpen()) {
        mSerialPort->close();
        qDebug() << "Closed the port" << mSerialPort->portName();
    } else {
        qDebug() << mSerialPort->portName() << "is closed";
    }

    // 返回串口打开结果 true/false
    bool suc = mSerialPort->open(QIODevice::ReadWrite);
    if (!suc) {
        qDebug() << "Failed to open port" << mSerialPort->portName()
                 << "Error:" << mSerialPort->errorString()
                 << "Error Code:" << mSerialPort->error();
        return 1;
    } else {
        qDebug() << "success to open port" << mSerialPort->portName()
                 << "  BaudRate" << mSerialPort->baudRate()
                 << "  Parity" << mSerialPort->parity()
                 << "  dataBits" << mSerialPort->dataBits()
                 << "  stopBits" << mSerialPort->stopBits();
    }
    return suc;
}

void Dialog::UpdatePort()
{
    // 智能识别当前系统有效端口号
    QStringList newPortStringList;
    const auto infos = QSerialPortInfo::availablePorts();
    for (const QSerialPortInfo & info : infos)
    {
        newPortStringList += info.portName();
    }
    // 更新串口号
    if (newPortStringList.size() != oldPortStringList.size())
    {
        oldPortStringList = newPortStringList;
        ui->CBoxSerialPort->clear();
        ui->CBoxSerialPort->addItems(oldPortStringList);
    }
}

unsigned char Dialog::checkcrc8(uint8_t * buf ,uint32_t len)
{
    qDebug("checkcrc8");
    uint32_t sum = 0;
    uint32_t i;
    for(i=0;i<len;i++)
    {
        sum+=buf[i];
    }
    qDebug("2222222 The sum : <0x%x>", (uint8_t)sum);
    return (uint8_t)sum;
}

unsigned char Dialog::checkcrcBA(QByteArray buf ,int len)
{
    uint8_t sum = 0;
    uint8_t i;
    for(i=0;i<len;i++)
    {
        sum+=buf[i];
    }
    sum = sum % 256;
    return sum;

}

float Dialog::uint32ToFloat(uint32_t intValue)
{
    myUnion.uint = intValue;
    float floatValue = myUnion.floatVal;

    return floatValue;
}

void Dialog::allInit()
{
    mIsOpen = false;
    mHexShowFlag = false;
    mRec_Flag = false;
    mWeixiu_Flag = false;
    mGuFen_Flag = true;
    mFenSan_Flag = true;
    mQingIn_Flag = true;
    mQingOut_Flag = true;
    mQingOut_Flag2 = true;
    mQingIn_Flag2 = true;
    mMoNi_Flag = true;
    mWrite_Flag = false;
    mSave_Flag = false;

    ui->BtnOpen->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");
    ui->pushButton_weixiu->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");
    ui->pushButton_read->setStyleSheet("background-color: rgb(85, 170, 255); color: rgb(255, 255, 255);");
    ui->pushButton_write->setStyleSheet("background-color: rgb(85, 170, 255); color: rgb(255, 255, 255);");
    ui->pushButton_init->setStyleSheet("background-color: rgb(85, 170, 255); color: rgb(255, 255, 255);");
    ui->pushButton_gfjck->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");
    ui->pushButton_fsck->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");
    ui->pushButton_qingin->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");
    ui->pushButton_qingout->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");
    ui->pushButton_qingin_2->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");
    ui->pushButton_qingout_2->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");
    ui->pushButton_WXRead->setStyleSheet("background-color: rgb(85, 170, 255); color: rgb(255, 255, 255)");
    ui->pushButton_WXWrite->setStyleSheet("background-color: rgb(85, 170, 255); color: rgb(255, 255, 255)");
    ui->pushButton_WXInit->setStyleSheet("background-color: rgb(85, 170, 255); color: rgb(255, 255, 255)");
    ui->pushButton_moni->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");
    ui->pushButton_saveStart->setStyleSheet("background-color: rgb(85, 170, 127); color: rgb(255, 255, 255)");
    ui->pushButton_setPathName->setStyleSheet("background-color: rgb(85, 170, 255); color: rgb(255, 255, 255)");
    ui->pushButton_setSavePath->setStyleSheet("background-color: rgb(85, 170, 255); color: rgb(255, 255, 255)");
    ui->pushButton_saveFlash->setStyleSheet("background-color: rgb(85, 170, 255); color: rgb(255, 255, 255)");
    this->setWindowIcon(QIcon(":/res/log2.png"));
    this->setWindowTitle("V0103_上位机");
    ui->label_log->setStyleSheet("QLabel {" "background-image: url(:/res/ql.png);" "border: none;" "}");
    ui->label_log->show();
}
